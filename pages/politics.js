import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Layout from '@/components/Layout'
import Prismic from "prismic-javascript"
import { RichText } from 'prismic-reactjs'
import Link from 'next/link'
import { Client } from "@/prismic-configuration";
import { PrismicText } from '@prismicio/react'
const inter = Inter({ subsets: ['latin'] })

export default function Politics({ article2, trending2 }) {
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Layout>
                <h1 className='layout_title'>Political Punchlines: Tickling Funny Bone in the Halls of Power</h1>
                <div className='flex'>
                    <div>
                        <div className='mainArticleBox'>
                            {
                                article2.results.map((article, index) => (
                                    <>
                                        <Link href={`article/${article.uid}`} className='article_title'>
                                            <h1 key={article.uid} >
                                                {article.data.article2title}
                                            </h1>
                                        </Link>

                                        {article.data.slices.map((slice, sliceIndex) => (
                                            <div key={slice.uid}>
                                                {slice.items.map((item, index) => (
                                                    <img src={item.article2sliceimage.url} width={500} height={300} />
                                                ))}
                                            </div>
                                        ))}
                                       <p className='article_content'> {article.data.article2text}</p>
                                    </>
                                ))
                            }
                        </div>
                    </div>
                    <div className='trending_box'>
                        <div>
                            {trending2.results.map((first, index) => (
                                <>
                                    <div key={first.data.uid}>
                                        <h2 className='trending_title' >{first.data.slices[0].primary.trending2title}</h2>
                                        {first.data.slices.map((second, index) => (
                                            second.items.map((third, index) => (
                                                <div>

                                                    <div key={index} className='trending_list_wrapper'>
                                                        <p><Link href="./trending/trending"  className=' politic_list'>{third.trending2list1}</Link><hr /></p>
                                                        <p><Link href="./trending/trending"  className=' politic_list' >{third.trending2list2}</Link><hr /></p>
                                                        <p><Link href="./trending/trending"  className=' politic_list'>{third.trending2list3}</Link><hr /></p>
                                                    </div>

                                                </div>
                                            ))
                                        ))}
                                    </div>
                                </>
                            ))

                            }
                        </div >
                    </div>
                </div>
            </Layout>
        </>
    )
}


// this function is called everytime when request is made or refresh

export async function getServerSideProps() {
    const article2 = await Client().query(Prismic.Predicates.at("document.type", "article2"));
    const trending2 = await Client().query(Prismic.Predicates.at("document.type", "trending2"));
    console.log(trending2)
    return {
        props: {
            article2: article2,
            trending2: trending2,

        }
    }
}